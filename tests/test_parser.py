import pytest
from app.iptables_parser import parse_iptables_rules, group_rules, sanitize_input

def test_sanitize_input():
    """Test sanitize_input function"""
    # Test with potentially dangerous characters
    input_with_dangerous_chars = "iptables -A INPUT -j ACCEPT; rm -rf /"
    sanitized = sanitize_input(input_with_dangerous_chars)
    assert ";" not in sanitized
    
    # Test with normal input
    normal_input = "iptables -A INPUT -j ACCEPT"
    sanitized_normal = sanitize_input(normal_input)
    assert sanitized_normal == normal_input

def test_parse_iptables_rules_empty():
    """Test parse_iptables_rules with empty input"""
    result = parse_iptables_rules("")
    assert result == []

def test_parse_iptables_rules_valid():
    """Test parse_iptables_rules with valid input"""
    valid_rules = """# Generated by iptables-save
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp --dport 22 -j ACCEPT
COMMIT"""
    
    result = parse_iptables_rules(valid_rules)
    
    assert len(result) == 2
    assert result[0]['chain'] == 'INPUT'
    assert result[0]['in_interface'] == 'lo'
    assert result[0]['action'] == 'ACCEPT'
    
    assert result[1]['chain'] == 'INPUT'
    assert result[1]['protocol'] == 'tcp'
    assert result[1]['dport'] == '22'
    assert result[1]['action'] == 'ACCEPT'

def test_parse_iptables_rules_with_source_destination():
    """Test parse_iptables_rules with source and destination"""
    rules = """*filter
-A INPUT -s 192.168.1.0/24 -d 10.0.0.1 -j ACCEPT
COMMIT"""
    
    result = parse_iptables_rules(rules)
    
    assert len(result) == 1
    assert result[0]['source'] == '192.168.1.0/24'
    assert result[0]['destination'] == '10.0.0.1'

def test_parse_iptables_rules_with_comment():
    """Test parse_iptables_rules with comments"""
    rules = """*filter
-A INPUT -p tcp --dport 80 -m comment --comment "Allow HTTP" -j ACCEPT
COMMIT"""
    
    result = parse_iptables_rules(rules)
    
    assert len(result) == 1
    assert result[0]['comment'] == 'Allow HTTP'

def test_group_rules():
    """Test group_rules function"""
    rules = [
        {
            'chain': 'INPUT',
            'protocol': 'tcp',
            'dport': '22',
            'action': 'ACCEPT',
            'in_interface': 'eth0'
        },
        {
            'chain': 'OUTPUT',
            'protocol': 'tcp',
            'dport': '80',
            'action': 'ACCEPT',
            'out_interface': 'eth0'
        },
        {
            'chain': 'INPUT',
            'protocol': 'udp',
            'dport': '53',
            'action': 'DROP',
            'in_interface': 'eth1'
        }
    ]
    
    grouped = group_rules(rules)
    
    # Check grouping by chain
    assert len(grouped['by_chain']['INPUT']) == 2
    assert len(grouped['by_chain']['OUTPUT']) == 1
    
    # Check grouping by action
    assert len(grouped['by_action']['ACCEPT']) == 2
    assert len(grouped['by_action']['DROP']) == 1
    
    # Check grouping by protocol
    assert len(grouped['by_protocol']['tcp']) == 2
    assert len(grouped['by_protocol']['udp']) == 1
    
    # Check grouping by interface
    assert len(grouped['by_interface']['eth0']) == 2
    assert len(grouped['by_interface']['eth1']) == 1
